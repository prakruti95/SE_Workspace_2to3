#include <stdio.h>

#define PLAYER 'X'
#define COMPUTER 'O'

char board[3][3];

// Initialize the board with numbers 1 to 9
void initializeBoard() {
    int num = '1';
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            board[i][j] = num++;
}

// Print the current state of the board
void printBoard() {
    printf("\n");
    for (int i = 0; i < 3; i++) {
        printf(" %c | %c | %c ", board[i][0], board[i][1], board[i][2]);
        if (i < 2)
            printf("\n---|---|---\n");
    }
    printf("\n\n");
}

// Check if any moves are left
int isMovesLeft() {
    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] != PLAYER && board[i][j] != COMPUTER)
                return 1;
    return 0;
}

// Evaluate the board and return score
int evaluate() {
    // Check rows and columns
    for (int i = 0; i < 3; i++) {
        if (board[i][0] == board[i][1] && board[i][1] == board[i][2]) {
            if (board[i][0] == COMPUTER) return +10;
            if (board[i][0] == PLAYER) return -10;
        }
        if (board[0][i] == board[1][i] && board[1][i] == board[2][i]) {
            if (board[0][i] == COMPUTER) return +10;
            if (board[0][i] == PLAYER) return -10;
        }
    }

    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == COMPUTER) return +10;
        if (board[0][0] == PLAYER) return -10;
    }

    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == COMPUTER) return +10;
        if (board[0][2] == PLAYER) return -10;
    }

    return 0;
}

// Minimax algorithm to find best move
int minimax(int depth, int isMax) {
    int score = evaluate();
    if (score == 10) return score - depth;    // Sooner win is better
    if (score == -10) return score + depth;   // Later loss is better
    if (!isMovesLeft()) return 0;             // Draw

    if (isMax) {
        int best = -1000;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] != PLAYER && board[i][j] != COMPUTER) {
                    char backup = board[i][j];
                    board[i][j] = COMPUTER;
                    best = (minimax(depth + 1, 0) > best) ? minimax(depth + 1, 0) : best;
                    board[i][j] = backup;
                }
        return best;
    } else {
        int best = 1000;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (board[i][j] != PLAYER && board[i][j] != COMPUTER) {
                    char backup = board[i][j];
                    board[i][j] = PLAYER;
                    best = (minimax(depth + 1, 1) < best) ? minimax(depth + 1, 1) : best;
                    board[i][j] = backup;
                }
        return best;
    }
}

// Find the best move for the computer
void computerMove() {
    int bestVal = -1000;
    int bestRow = -1, bestCol = -1;

    for (int i = 0; i < 3; i++)
        for (int j = 0; j < 3; j++)
            if (board[i][j] != PLAYER && board[i][j] != COMPUTER) {
                char backup = board[i][j];
                board[i][j] = COMPUTER;
                int moveVal = minimax(0, 0);
                board[i][j] = backup;

                if (moveVal > bestVal) {
                    bestRow = i;
                    bestCol = j;
                    bestVal = moveVal;
                }
            }

    board[bestRow][bestCol] = COMPUTER;
    printf("Computer placed O at position %d\n", bestRow * 3 + bestCol + 1);
}

// Handle player's move
void playerMove() {
    int move;
    while (1) {
        printf("Enter your move (1-9): ");
        scanf("%d", &move);
        if (move < 1 || move > 9) {
            printf("Invalid input. Try again.\n");
            continue;
        }

        int row = (move - 1) / 3;
        int col = (move - 1) % 3;

        if (board[row][col] == PLAYER || board[row][col] == COMPUTER) {
            printf("Cell already taken. Try another.\n");
        } else {
            board[row][col] = PLAYER;
            break;
        }
    }
}

// Check if game is over
int isGameOver() {
    int score = evaluate();
    if (score == 10) {
        printBoard();
        printf("üíª Computer wins!\n");
        return 1;
    } else if (score == -10) {
        printBoard();
        printf("üéâ You win!\n");
        return 1;
    } else if (!isMovesLeft()) {
        printBoard();
        printf("ü§ù It's a draw!\n");
        return 1;
    }
    return 0;
}

int main() {
    initializeBoard();

    printf("=== Tic Tac Toe ===\n");
    printf("You are X. Computer is O.\n");

    printBoard();

    while (1) {
        playerMove();
        if (isGameOver()) break;
        computerMove();
        printBoard();
        if (isGameOver()) break;
    }

    return 0;
}
